from bs4 import BeautifulSoup
from glob import glob
import subprocess
import tomllib

classify_info = {
    "main": {
        "name": ['body'],
        "class": ['ability-head'],
    },
    "title": {
        "name": ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
        "class": ['nav-header', 'h0'],
    },
    "code": {
        "name": ["code"],
        "class": ["highlight"],
    },
    "symbol": {
        "name": [],
        "class": ['a-left', 'a-right', 'symbol', 'section'],
    },
    "hidden": {
        "name": ["style", "script", "head", "title", "meta", "[document]"],
        "class": [],
    },
}

meta = tomllib.loads(open("templates/meta.toml").read())
root_path = meta["config"]["path"]


def classify_element(element):
    for key in classify_info:
        value = classify_info[key]
        if element.name in value["name"]:
            return key
        if "class" in element.attrs:
            for cl in value["class"]:
                if cl in element.attrs["class"]:
                    return key
    return classify_element(element.parent)


def text_from_html(body: str, filter_with: str):
    soup = BeautifulSoup(body, 'html.parser')
    texts = soup.findAll(string=True)
    visible_texts = filter(lambda x: classify_element(x.parent) == filter_with, texts)
    return u" ".join(filter(lambda x: x != "", (t.strip() for t in visible_texts))).replace("\n", " ")


def text_from_css(css: str):
    lines = []
    for line in css.split("\n"):
        line = line.strip()
        if line.startswith("content: \""):
            line = line.replace("content: \"", "")
            if line.endswith("\";"):
                line = line.replace("\";", "")
            lines.append(line)
    return u" ".join(lines)


def glyphs(t: str):
    return repr("".join(sorted(list(set(t)))))


def make_font_cmdline(name):
    subset_args = []
    font_file = meta["fonts"][name]
    fallback_attr = f"{name}_fallback"
    subsets = sorted(list(set([name] + (meta["fonts"][fallback_attr] if fallback_attr in meta["fonts"] else []))))
    for subset in subsets:
        subset_args.append(f"--subset-from=build/extract/text_{subset}.txt")

    return [
        "PandocRulebookBase/support/mkwebfont.sh", "-v", "--splitter=none",
        "--store", f"build/web/{root_path}/webfonts", "--store-uri", "../webfonts/",
        font_file, "-o", f"build/web/{root_path}/img/wf_{name}.scss",
    ] + subset_args


text_main = ""
text_title = ""
text_code = ""
text_symbol = ""
for page in glob("build/web/**/*.html", recursive=True):
    html = open(page).read()
    text_main += text_from_html(html, "main") + "\n\n"
    text_title += text_from_html(html, "title") + "\n\n"
    text_code += text_from_html(html, "code") + "\n\n"
    text_symbol += text_from_html(html, "symbol") + "\n\n"
text_symbol += text_from_css(open("build/extract/style.css").read()) + "\n\n"


open("build/extract/text_main.txt", "w").write(text_main)
open("build/extract/text_title.txt", "w").write(text_title)
open("build/extract/text_code.txt", "w").write(text_code)
open("build/extract/text_symbol.txt", "w").write(text_symbol)

print("Text glyphs: "+glyphs(text_main))
print("Title glyphs: "+glyphs(text_title))
print("Code glyphs: "+glyphs(text_code))
print("Symbol glyphs: "+glyphs(text_symbol))

cmdlines = [make_font_cmdline(x) for x in ["main", "title", "code", "symbol"]]
proc = subprocess.run(["PandocRulebookBase/support/mkwebfont.sh", "--help"], capture_output = True)
for cmd in [subprocess.Popen(cmd) for cmd in cmdlines]:
    cmd.wait()
    if cmd.returncode != 0:
        raise "Bad return!"

all_style_scss = """
// Autogenerated from Python
@use 'style';
@use 'wf_main';
@use 'wf_title';
@use 'wf_code';
@use 'wf_symbol';
"""
open(f"build/web/{root_path}/img/all_style.scss", "w").write(all_style_scss)
